name: "AppRunner Monolitic"
run-name: "AppRunner Monolitic"
on:
  workflow_dispatch:
    inputs:
      cloud:
        description: "Steps"
        required: true
        default: "build"
        type: choice
        options: ["All", "build", "deploy-create", "deploy-update"]
jobs:
  build:
    if: ${{ github.event.inputs.cloud == 'build' }}
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout repositorio"
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 #v3: v4.1.7
      - name: "Configurar QEMU"
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf #v2: v3.2.0
      - name: "Configurar Docker Buildx"
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb #v2: v3.3.0
      - name: "Configurar tag y etiquetas para ${{ github.ref }}"
        run: |
          if [ "$GITHUB_REF" == "refs/heads/main" ]; then
          echo "DOCKER_TAG=latest-apprunnerM" >> $GITHUB_ENV
          else
          echo "DOCKER_TAG=${{ github.ref_name }}-apprunnerM" >> $GITHUB_ENV
          fi
      - name: "Configurar credenciales de AWS"
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 #v2 #v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: "Autenticar en AWS ECR"
        id: login-ecr-publico
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 #v1 #v2.0.1
        with:
          registry-type: public
      - name: "Preparar"
        working-directory: ./backstage
        run: > 
          yarn install --frozen-lockfile && 
          yarn tsc && 
          yarn build:backend --config ../../app-config.yaml
      - name: Build, tag, and push image to Amazon ECR
        id: build-publish
        working-directory: ./backstage
        env:
          REGISTRY: ${{ steps.login-ecr-publico.outputs.registry }}
          BASE_URL: ${{ vars.BASE_URL}}
        run: |
          docker image build . -f packages/backend/Dockerfile -t "${{ env.REGISTRY }}/${{ vars.AWS_REGISTRY_ALIAS }}/${{ vars.IMAGE_NAME }}:${{ env.DOCKER_TAG }}"
          docker push "${{ env.REGISTRY }}/${{ vars.AWS_REGISTRY_ALIAS }}/${{ vars.IMAGE_NAME }}:${{ env.DOCKER_TAG }}"
          echo "full_image=${{ env.REGISTRY }}/${{ vars.AWS_REGISTRY_ALIAS }}/${{ vars.IMAGE_NAME }}:${{ env.DOCKER_TAG }}"
  deploy-create:
    runs-on: ubuntu-latest
    if: github.event.inputs.cloud == 'deploy-create'
    steps:
      - name: "Configurar tag y etiquetas para ${{ github.ref }}"
        run: |
          if [ "$GITHUB_REF" == "refs/heads/main" ]; then
          echo "DOCKER_TAG=latest-apprunnerM" >> $GITHUB_ENV
          else
          echo "DOCKER_TAG=${{ github.ref_name }}-apprunnerM" >> $GITHUB_ENV
          fi
      - name: "Configurar credenciales de AWS"
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 #v2 #v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Crear archivo de configuración para AppRunner
        run:  |
          echo '{
            "ServiceName": "${{ vars.IMAGE_NAME }}",
            "SourceConfiguration": {
                "ImageRepository": { 
                   "ImageIdentifier": "${{ vars.AWS_REGISTRY }}/${{ vars.AWS_REGISTRY_ALIAS }}/${{ vars.IMAGE_NAME }}:${{ env.DOCKER_TAG }}",
                   "ImageRepositoryType": "ECR_PUBLIC"
                },
                "AutoDeploymentsEnabled": false
            },
            "InstanceConfiguration": {
               "Cpu": "0.25 vCPU",
               "Memory": "0.5 GB"
            }
          }' > apprunner.json
      - name: Deploy app en AWS App Runner
        id: deploy-apprunner
        run: |
          aws apprunner create-service \
            --cli-input-json file://apprunner.json
      - name: App Runner URL
        run: echo "App runner URL ${{ steps.deploy-apprunner.outputs.service.serviceUrl }}" 
  deploy-update:
    runs-on: ubuntu-latest
    if: github.event.inputs.cloud == 'deploy-update'
    steps:
      - name: "Configurar tag y etiquetas para ${{ github.ref }}"
        run: |
          if [ "$GITHUB_REF" == "refs/heads/main" ]; then
          echo "DOCKER_TAG=latest-apprunnerM" >> $GITHUB_ENV
          else
          echo "DOCKER_TAG=${{ github.ref_name }}-apprunnerM" >> $GITHUB_ENV
          fi
      - name: "Configurar credenciales de AWS"
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 #v2 #v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Crear archivo de configuración para AppRunner
        run:  |
          echo '{
            "ServiceArn": "${{ secrets.AWS_APPRUNNER_ARN}}",
            "SourceConfiguration": {
                "ImageRepository": { 
                   "ImageConfiguration": { 
                      "Port": "8080",
                      "RuntimeEnvironmentVariables": { 
                         "BASE_URL" : "${{ secrets.BASE_URL}}" 
                      }
                   },
                   "ImageIdentifier": "${{ vars.AWS_REGISTRY }}/${{ vars.AWS_REGISTRY_ALIAS }}/${{ vars.IMAGE_NAME }}:${{ env.DOCKER_TAG }}",
                   "ImageRepositoryType": "ECR_PUBLIC"
                }
            }
          }' > apprunner.json
      - name: Actualizar app en AWS App Runner
        id: deploy-apprunner
        run: |
          aws apprunner update-service \
            --cli-input-json file://apprunner.json
      - name: App Runner URL
        run: echo "App runner URL ${{ steps.deploy-apprunner.outputs.Service.ServiceUrl }}"
